!(bind! &langchain_llm ((py-atom langchain_openai.ChatOpenAI) (Kwargs (model (get-gpt-model)) (temperature 0))))
!(bind! &chart-prompt ((py-dot (py-atom langchain_core.prompts.ChatPromptTemplate) from_messages) (py-array
       (py-atom "(
            'system',
            'You are a helpful assistant.',
        )")
        (py-atom "('placeholder', '{chat_history}')")
        (py-atom "('user', '{input}')")
        ((py-atom langchain_core.prompts.MessagesPlaceholder) (Kwargs (variable_name "agent_scratchpad")))
)))

!(bind! &langchain-agent ((py-atom langchain.agents.create_openai_tools_agent) &langchain_llm
        (Kwargs (tools (get-langchain-tools)) (prompt &chart-prompt))))
!(bind! &agent-executor ((py-atom langchain.agents.AgentExecutor)
    (Kwargs (agent &langchain-agent) (tools (get-langchain-tools)))))

(= (respond ($role $message))
    ((py-dot &agent-executor invoke)(py-dict ('input' $message)))
)

!(Response (respond (messages)))






